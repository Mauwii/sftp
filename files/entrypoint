#!/bin/bash
set -Eeo pipefail

function log() {
    echo "[$(date)][$0]: $*" >&2
}

# shellcheck disable=2154
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

reArgsMaybe="^[^:[:space:]]+:.*$" # Smallest indication of attempt to use argument
reArgSkip='^([[:blank:]]*#.*|[[:blank:]]*)$' # comment or empty line

# Paths
userConfPathLegacy="/etc/sftp-users.conf"
userConfFinalPath="/var/run/sftp/users.conf"

if [[ -z "$acipersistPath" ]]; then
    acipersistPath="/home/acipersist"
    log "using $acipersistPath as acipersistPath"
fi

if [[ -f "$acipersistPath"/users.conf ]]; then
    userConfPath="$acipersistPath/users.conf"
else
    userConfPath="/etc/sftp/users.conf"
fi

# Allow running other programs, e.g. bash
if [[ -z "$1" || "$1" =~ $reArgsMaybe ]]; then
    startSshd=true
else
    startSshd=false
fi

# Source custom scripts to run first
if [[ -d "$acipersistPath"/prescripts ]] ; then
    for f in "$acipersistPath"/prescripts/*; do
        if [[ -x "$f" ]]; then
            log "Running $f ..."
            $f
        else
            log "Could not run $f, because it's missing execute permission (+x)."
        fi
    done
    unset f
fi

# Backward compatibility with legacy config path
if [ ! -f "$userConfPath" ] && [ -f "$userConfPathLegacy" ]; then
    log "found legacy config path at $userConfPathLegacy"
    mkdir -p "$(dirname $userConfPath)"
    ln -s "$userConfPathLegacy" "$userConfPath"
    log "linked legacy config path to $userConfPath"
fi

# Create users only on first run
if [[ ! -f "$userConfFinalPath" ]]; then
    mkdir -p "$(dirname $userConfFinalPath)"
    log "Looks like firstrun, created $userConfFinalPath"

    if [ -f "$userConfPath" ]; then
        log "found $userConfPath, appending users to $userConfFinalPath"
        # Append mounted config to final config
        grep -v -E "$reArgSkip" < "$userConfPath" > "$userConfFinalPath"
    fi

    if $startSshd; then
        # Append users from arguments to final config
        for user in "$@"; do
            echo "$user" >> "$userConfFinalPath"
        done
    fi

    if [[ -n "$SFTP_USERS" ]]; then
        # Append users from environment variable to final config
        IFS=" " read -r -a usersFromEnv <<< "$SFTP_USERS"
        for user in "${usersFromEnv[@]}"; do
            echo "$user" >> "$userConfFinalPath"
        done
    fi

    # Check that we have users in config
    if [[ -f "$userConfFinalPath" ]] && [[ "$(wc -l < "$userConfFinalPath")" -gt 0 ]]; then
        # Import users from final conf file
        while IFS= read -r user || [[ -n "$user" ]]; do
            create-sftp-user "$user"
        done < "$userConfFinalPath"
    elif $startSshd; then
        log "FATAL: No users provided!"
        exit 3
    fi
    
    # get ssh host keys from acipersist, if not available generate
    aciHostkeysPath="$acipersistPath/hostkeys"
    if [ -d $aciHostkeysPath ] ; then
            cp $aciHostkeysPath/*_key /etc/ssh/
            chown root:root /etc/ssh/*_key
            chmod 600 /etc/ssh/*_key
            log "copied and owned keys in $aciHostkeysPath"
    else
        log "couldn't find $aciHostkeysPath"
    fi
    if [ ! -e "$aciHostkeysPath" ]; then
        mkdir -p "$aciHostkeysPath"
        log "created $aciHostkeysPath"
    fi
    if [ ! -f "/etc/ssh/ssh_host_ed25519_key" ] ; then
        log "couldnt find /etc/ssh/ssh_host_ed25519_key"
        ssh-keygen -t ed25519 -E md5 -f /etc/ssh/ssh_host_ed25519_key -N ''
        if [ ! -e "$aciHostkeysPath/ssh_host_ed25519_key" ]; then
            cat /etc/ssh/ssh_host_ed25519_key > "$aciHostkeysPath"/ssh_host_ed25519_key
            log "added ed25519 hostkey to $aciHostkeysPath"
        fi
    fi
    if [ ! -f "/etc/ssh/ssh_host_rsa_key" ]; then
        log "couldnt find /etc/ssh/ssh_host_rsa_key"
        ssh-keygen -t rsa -E md5 -b 2048 -f /etc/ssh/ssh_host_rsa_key -N ''
        if [ ! -e "$aciHostkeysPath/ssh_host_rsa_key" ]; then
            cat /etc/ssh/ssh_host_rsa_key > "$aciHostkeysPath"/ssh_host_rsa_key
            log "added rsa hostkey to $aciHostkeysPath"
        fi
    fi
fi

# copy sshd_config from /acipersist if exists, if doesnt exist copy it from /etc/ssh to /acipersist
aciSshdConfig="$acipersistPath/sshd_config"

if [[ -f "$aciSshdConfig" ]] && [[ ! "$aciSshdConfig" -ef /etc/ssh/sshd_config ]] ; then
    rm /etc/ssh/sshd_config
    cp "$aciSshdConfig" /etc/ssh/
    log "copied sshd_config from $aciSshdConfig"
elif [[ -e "$acipersistPath" ]] &&  [[ ! -f "$aciSshdConfig" ]]; then
    cp /etc/ssh/sshd_config "$aciSshdConfig"
    log "copied sshd defaultconfig to $aciSshdConfig"
elif [[ /etc/ssh/sshd_config -ot "$aciSshdConfig" ]] ; then
    rm /etc/ssh/sshd_config
    cp "$aciSshdConfig" /etc/ssh/
    log "copied sshd config from $aciSshdConfig"
fi

# Generate public keys for this container
if [ -e "/etc/ssh/ssh_host_*_key.pub" ] ; then
    for f in /etc/ssh/ssh_host_*_key.pub; do
        log "$(ssh-keygen -l -E md5 -f $f)"
    done
else
    log "generating SSH Host Public Keys"
    for f in /etc/ssh/ssh_host_*_key; do
        ssh-keygen -y -E md5 -f "$f" > "$f".pub
        log "$(ssh-keygen -l -E md5 -f $f)"
    done
fi

# Source custom scripts, if any
if [[ -d "$acipersistPath"/scripts ]] ; then
    for f in "$acipersistPath"/scripts/*; do
        if [[ -x "$f" ]]; then
            log "Running $f ..."
            $f
        else
            log "Could not run $f, because it's missing execute permission (+x)."
        fi
    done
    unset f
fi

if $startSshd; then
    log "Executing sshd"
    exec /usr/sbin/sshd -D -e
else
    log "Executing $*"
    exec "$@"
fi
