#!/bin/bash
set -Eeo pipefail

# shellcheck disable=2154
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

reArgsMaybe="^[^:[:space:]]+:.*$" # Smallest indication of attempt to use argument
reArgSkip='^([[:blank:]]*#.*|[[:blank:]]*)$' # comment or empty line

# Paths
acipersistPath="/acipersist"
aciUserConf="$acipersistPath/users.conf"
aciHostkeysPath="$acipersistPath/hostkeys"
aciSshdConfig="$acipersistPath/sshd_config"
userConfPath="/etc/sftp/users.conf"
userConfPathLegacy="/etc/sftp-users.conf"
userConfFinalPath="/var/run/sftp/users.conf"


function log() {
    echo "[$0] [$(date)] $*" >&2
}

# Allow running other programs, e.g. bash
if [[ -z "$1" || "$1" =~ $reArgsMaybe ]]; then
    startSshd=true
else
    startSshd=false
fi

# Backward compatibility with legacy config path
if [ ! -f "$userConfPath" ] && [ -f "$userConfPathLegacy" ]; then
    log "found legacy config path at $userConfPathLegacy"
    mkdir -p "$(dirname $userConfPath)"
    ln -s "$userConfPathLegacy" "$userConfPath"
    log "linked legacy config path to $userConfPath"
fi

# Create users only on first run
if [[ ! -f "$userConfFinalPath" ]]; then
    mkdir -p "$(dirname $userConfFinalPath)"
    log "Looks like firstrun, created $userConfFinalPath"

    if [ -f "$userConfPath" ]; then
        log "found $userConfPath, appending users to $userConfFinalPath"
        # Append mounted config to final config
        grep -v -E "$reArgSkip" < "$userConfPath" > "$userConfFinalPath"
    fi

    if [[ -f "$aciUserConf" ]]; then
        log "found $aciUserConf, adding to $userConfFinalPath"
        # Append mounted config to final config
        grep -v -E "$reArgSkip" < "$aciUserConf" > "$userConfFinalPath"
    fi

    if $startSshd; then
        # Append users from arguments to final config
        for user in "$@"; do
            echo "$user" >> "$userConfFinalPath"
        done

        # copy SSHD Config from /acipersist if exists
        if [ -f "$aciSshdConfig" ] ; then
            rm /etc/ssh/sshd_config
            cp "$aciSshdConfig" /etc/ssh/sshd_config
            log "using custom sshd_config from $aciSshdConfig"
        fi
    fi

    if [[ -n "$SFTP_USERS" ]]; then
        # Append users from environment variable to final config
        IFS=" " read -r -a usersFromEnv <<< "$SFTP_USERS"
        for user in "${usersFromEnv[@]}"; do
            echo "$user" >> "$userConfFinalPath"
        done
    fi

    # Check that we have users in config
    if [[ -f "$userConfFinalPath" ]] && [[ "$(wc -l < "$userConfFinalPath")" -gt 0 ]]; then
        # Import users from final conf file
        while IFS= read -r user || [[ -n "$user" ]]; do
            "create-sftp-user" "$user"
        done < "$userConfFinalPath"
    elif $startSshd; then
        log "FATAL: No users provided!"
        exit 3
    fi

    # Generate unique ssh keys for this container, if needed

    if [ ! -d $aciHostkeysPath ]; then
        mkdir -p $aciHostkeysPath && log "created $aciHostkeysPath"
    else
        hostkeys=$(ls $aciHostkeysPath | grep _key)
        for key in $hostkeys; do
            cp $aciHostkeysPath/$key /etc/ssh/$key
            chown 0:0 "/etc/ssh/$key"
            chmod 600 "/etc/ssh/$key"
            log "copied $key to /etc/ssh"
        done
    fi
    
    if [ ! -d /etc/ssh ]; then
        mkdir -p /etc/ssh && log "created /etc/ssh"
    fi
    
    if [ ! -f /etc/ssh/ssh_host_ed25519_key ]; then
        ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N '' -E md5 < /dev/null
        cp /etc/ssh/ssh_host_ed25519_key "$aciHostkeysPath"/ssh_host_ed25519_key
    fi
    if [ ! -f /etc/ssh/ssh_host_rsa_key ]; then
           ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N '' -E md5 < /dev/null
           cp /etc/ssh/ssh_host_rsa_key "$aciHostkeysPath"/ssh_host_rsa_key
    fi
fi

# Source custom scripts, if any
if [[ -d $acipersistPath/scripts ]]; then
    for f in $acipersistPath/scripts/*.sh ; do
        if [[ -x "$f" ]]; then
            log "Running $f ..."
            $f
        else
            log "Could not run $f, because it's missing execute permission (+x)."
        fi
    done
    unset f
fi

if $startSshd; then
    log "Executing sshd"
    exec /usr/sbin/sshd -D -e
else
    log "Executing $*"
    exec "$@"
fi
