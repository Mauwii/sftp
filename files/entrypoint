#!/bin/bash
set -Eeo pipefail

# shellcheck disable=2154
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

reArgsMaybe="^[^:[:space:]]+:.*$" # Smallest indication of attempt to use argument
reArgSkip='^([[:blank:]]*#.*|[[:blank:]]*)$' # comment or empty line

# Paths
userConfPath="/etc/sftp/users.conf"
userConfPathLegacy="/etc/sftp-users.conf"
userConfFinalPath="/var/run/sftp/users.conf"
acipersistPath="/mnt/acipersist"
acipersistRepo="/mnt/sftp-aci"

function log() {
    echo "[$0] [$(date)] $*" >&2
}

# Allow running other programs, e.g. bash
if [[ -z "$1" || "$1" =~ $reArgsMaybe ]]; then
    startSshd=true
else
    startSshd=false
fi

# link repositorys AciPersist folder if repo is cloned into /mnt/sftp-aci-repo
if [[ ! -e "$acipersistPath" ]]; then
    log "missing $acipersistPath, trying to link it from $acipersistRepo"
    if [[ -e "$acipersistRepo/AciPersist" ]]; then
        # acipersistPath="$acipersistRepo/AciPersist"
        # log "changing acipersistPath to $acipersistPath"
        ln -s "$acipersistRepo/AciPersist" "$acipersistPath"
        log "linked $acipersistRepo/AciPersist to $acipersistPath"
    else
        log "repo not found at $acipersistRepo"
        # Todo - clone git repo???
    fi
fi



# Backward compatibility with legacy config path
if [[ ! -f "$userConfPath" ]] && [[ -f "$userConfPathLegacy" ]]; then
    mkdir -p "$(dirname $userConfPath)"
    ln -s "$userConfPathLegacy" "$userConfPath"
fi

# Create users only on first run
if [[ ! -f "$userConfFinalPath" ]]; then
    mkdir -p "$(dirname $userConfFinalPath)"
    if [[ -f "$aciuserconf" ]]; then
        # Append mounted config to final config
        grep -v -E "$reArgSkip" < "$userConfPath" > "$userConfFinalPath"
    fi
    cat /mnt/acipersist/sftp/users.conf >> $userConfFinalPath
    if $startSshd; then
        # Append users from arguments to final config
        for user in "$@"; do
            echo "$user" >> "$userConfFinalPath"
        done
    fi

    if [[ -n "$SFTP_USERS" ]]; then
        # Append users from environment variable to final config
        IFS=" " read -r -a usersFromEnv <<< "$SFTP_USERS"
        for user in "${usersFromEnv[@]}"; do
            echo "$user" >> "$userConfFinalPath"
        done
    fi

    # Check that we have users in config
    if [[ -f "$userConfFinalPath" ]] && [[ "$(wc -l < "$userConfFinalPath")" -gt 0 ]]; then
        # Import users from final conf file
        while IFS= read -r user || [[ -n "$user" ]]; do
            create-sftp-user "$user"
        done < "$userConfFinalPath"
    elif $startSshd; then
        log "FATAL: No users provided!"
        exit 3
    fi

    # Generate unique ssh keys for this container, if needed
    hostkeypath=/etc/ssh/
    ed25519_hostkey=$acipersistPath/hostkeys/ssh_host_ed25519_key
    rsa_hostkey=$acipersistPath/hostkeys/ssh_host_rsa_key
    
    if [[ ! -f /etc/ssh/ssh_host_ed25519_key ]]; then
        if [[ -f "$ed25519_hostkey" ]]; then
            log "found $ed25519_hostkey"
            cp "$ed25519_hostkey" /etc/ssh/ssh_host_ed25519_key
            chmod 600 /etc/ssh/ssh_host_ed25519_key
            log "copied and owned $ed25519_hostkey to /etc/ssh"
            log "generating missing public key"
            ssh-keygen -y -f /etc/ssh/ssh_host_ed25519_key > /etc/ssh/ssh_host_ed25519_key.pub
            chown 644 /etc/ssh/ssh_host_ed25519_key.pub
            log "Fingerprint: $(ssh-keygen -l -f $ed25519_hostkey -E md5)"
        else
            log "couldn't find $ed25519_hostkey, generating new key"
            ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N '' -E md5
            if [[ -e "$acipersistPath" ]]; then
                mkdir -p "$hostkeypath"
                cp /etc/ssh/ssh_host_ed25519_key "$ed25519_hostkey" && log "copied ed25519 hostkey to $ed25519_hostkey" 
            fi
        fi
    fi

    if [[ ! -f /etc/ssh/ssh_host_rsa_key ]]; then
        if [[ -f "$rsa_hostkey" ]]; then
            log "found $rsa_hostkey"
            cp "$rsa_hostkey" /etc/ssh/ssh_host_rsa_key
            chmod 600 /etc/ssh/ssh_host_rsa_key
            log "copied $rsa_hostkey to /etc/ssh"
            log "Generating missing public key"
            ssh-keygen -y -f /etc/ssh/ssh_host_rsa_key > /etc/ssh/ssh_host_rsa_key.pub
            chown 644 /etc/ssh/ssh_host_ed25519_key.pub
            log "Fingerprint: $(ssh-keygen -l -f $rsa_hostkey -E md5)"
        else
            log "couldn't find $rsa_hostkey, generating new key"
            ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N '' -E md5
            if [[ -e "$acipersistPath" ]]; then
                cp /etc/ssh/ssh_host_ed25519_key "$rsa_hostkey" && log "copied rsa hostkey to $rsa_hostkey"
            fi
        fi
    fi

    # ToDo: combine ssh_host_*_key generation in loop
    #   for higher key compatibility
fi

# Source custom scripts, if any
if [[ -d $acipersistPath/scripts ]]; then
    for f in $acipersistPath/scripts/*.sh ; do
        if [[ -x "$f" ]]; then
            log "Running $f ..."
            $f
        else
            log "Could not run $f, because it's missing execute permission (+x)."
        fi
    done
    unset f
fi

if $startSshd; then
    log "Executing sshd"
    exec /usr/sbin/sshd -D -e
else
    log "Executing $*"
    exec "$@"
fi
